buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/'}
    }
    dependencies {
        classpath 'gradle.plugin.com.onesignal:onesignal-gradle-plugin:0.14.0'
    }
}


apply plugin: 'com.onesignal.androidsdk.onesignal-gradle-plugin'
apply plugin: 'com.android.application'




android {
    applicationVariants.all { variant ->
        variant.javaCompileProvider.get().doLast {
            runAllatori(variant)
        }
    }
    compileSdk 31

    defaultConfig {

        applicationId "com.ttraafffic.jjamm.mmew"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
	//@dllDependencies
    implementation 'com.onesignal:OneSignal:[4.0.0, 4.99.99]'
    implementation 'com.facebook.android:facebook-android-sdk:[5,6)'
    implementation 'com.appsflyer:af-android-sdk:6.4.2'
    implementation 'com.android.installreferrer:installreferrer:2.2'
    implementation 'androidx.appcompat:appcompat:1.4.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'com.google.android.gms:play-services-ads-identifier:18.0.1'
    testImplementation 'junit:junit:'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

//@runAllatori
def runAllatori(variant) {
    copy {
        from "$projectDir/allatori.xml"
        into "$buildDir/intermediates/classes/"
        // old Gradle versions:
        // expand(classesRoot: variant.javaCompile.destinationDir,
        //        kotlinRoot: "${buildDir}/tmp/kotlin-classes/${variant.name}",
        //        androidJar: "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar",
        //        classpathJars: variant.javaCompile.classpath.getAsPath(),
        //        logFile: "allatori-log-${variant.name}.xml")
        // new Gradle versions:
        expand(classesRoot: variant.javaCompileProvider.get().destinationDir,
                kotlinRoot: "${buildDir}/tmp/kotlin-classes/${variant.name}",
                androidJar: "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar",
                classpathJars: variant.javaCompileProvider.get().classpath.getAsPath(),
                logFile: "allatori-log-${variant.name}.xml")
        rename('allatori.xml', "allatori-${variant.name}.xml")
    }

    // old Gradle versions:
    // new File("${variant.javaCompile.destinationDir}-obfuscated").deleteDir()
    // new Gradle versions:
    new File("${variant.javaCompileProvider.get().destinationDir}-obfuscated").deleteDir()

    // Kotlin support
    // new File("${buildDir}/tmp/kotlin-classes/${variant.name}-obfuscated").deleteDir()

    javaexec {
        main = 'com.allatori.Obfuscate'
        classpath = files("$rootDir/allatori/allatori.jar")
        args "$buildDir/intermediates/classes/allatori-${variant.name}.xml"
    }

    // old Gradle versions:
    // new File("${variant.javaCompile.destinationDir}").deleteDir()
    // new File("${variant.javaCompile.destinationDir}-obfuscated").renameTo(new File("${variant.javaCompile.destinationDir}"))
    // new Gradle versions:
    new File("${variant.javaCompileProvider.get().destinationDir}").deleteDir()
    new File("${variant.javaCompileProvider.get().destinationDir}-obfuscated").renameTo(new File("${variant.javaCompileProvider.get().destinationDir}"))

    // Kotlin support
    // new File("${buildDir}/tmp/kotlin-classes/${variant.name}").deleteDir()
    // new File("${buildDir}/tmp/kotlin-classes/${variant.name}-obfuscated").renameTo(new File("${buildDir}/tmp/kotlin-classes/${variant.name}"))
}
